name: Format, validate and apply new Infra

on:
  push:
    branches: ["main"]
  pull_request:

env:
  TF_LOG: INFO

jobs:
  provision:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Permission for GA to get AWS OIDC connection
      contents: read # Permission for GA to check out repository
      pull-requests: write # Permission for GA to comment on PRs
    defaults:
      run:
        working-directory: ./tf-aws
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: terraform fmt
        id: fmt
        run: terraform fmt -recursive -check
        continue-on-error: true

      - name: terraform init
        id: init
        run: terraform init

      - name: terraform validate
        id: validate
        run: terraform validate -no-color

      - name: terraform plan
        id: plan
        run: terraform plan -no-color
        if: github.event_name == 'pull_request'
        continue-on-error: true

      - name: Print terraform outputs
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fmtOutcome = "${{ steps.fmt.outcome }}";
            const fmtMessage = fmtOutcome === "failure" ? "üö® **Terraform Format failed!**\nPlease run `terraform fmt -recursive` and push the changes." : "";
            
            const output = `#### Terraform Format and Style üñå\`${fmtOutcome}\`
            ${fmtMessage}
            
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            }) 

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: terraform apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false