name: Build Gradle Project

on:
  push:
    branches: [ "main"]
  pull_request:
    branches: [ "main"]

env :
  VERSION: latest
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Permission for GA to get AWS OIDC connection
      contents: read # Permission to check out current Git repo
      security-events: write # Permission to submit security events to GitHub

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Generate Protobuf Classes
        run: ./gradlew generateProto

      - name: Build with Gradle Wrapper
        run: ./gradlew build --no-daemon

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log into AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Build, tag and push image
        env:
          IMAGE_TAG: ${{ github.sha }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY_ID: ${{ github.repository_id }}
        run: |
          docker buildx build --platform linux/amd64 --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.VERSION }}  --cache-from=type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:latest --cache-to=type=inline --push .
      
      - name: Delete image if scan fails
        if: ${{ failure() && steps.scan.outcome == 'failure' }}
        env:
          IMAGE_TAG: ${{ env.VERSION }}-${{ github.sha }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Delete both tags
          aws ecr batch-delete-image \
            --repository-name $ECR_REPOSITORY \
            --image-ids imageTag=$IMAGE_TAG imageTag=${{ env.VERSION }} \
            --region ${{ secrets.AWS_REGION }}
          
          echo "Vulnerability scan failed - images deleted from ECR"
          exit 1
